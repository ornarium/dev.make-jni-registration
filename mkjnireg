#!/usr/bin/perl

use strict;
use warnings;

sub make_registration {
	local $/ = undef;
	my $file = $_[0];
	my ( $dir, $file_name ) = m/(.*)[\\\/](.+)/ ? ( $1, $2 ) : ( undef, $_ );
	open(my $FH, "<$file") || die "can not open $file";
	my $class_method;
	my $a = <$FH>;
	close($FH);

	while($a =~ /.+Class:\s*(.+?)\s*\n.+Method:\s*(.+?)\s*\n.+Signature:\s*(.+?)\s*\n.+JNIEXPORT\s*(.+?);/msg) {
		my %data = ( method => $2, signature => $3, method_ref => "JNIEXPORT " . $4);
		push @{$class_method->{$1}}, \%data;
	}

	for(keys %$class_method) {
		my $class = $_;

		my $extern_text = "";
		my $methods_name = $class . "Methods";
		my $methods_text = "";
		my $register_text = "";
#TODO: 작업 필요
		my $class_path = "";

		open(my $DEF_FH, ">$dir/$class" . "_registration.h");
		for(@{$class_method->{$class}}){
			my $method = $_->{method};
			my $signature = $_->{signature};
			my $method_ref = $_->{method_ref};

			$extern_text .= "extern $method_ref\n";
			$methods_text .= "    { \"$method\", \"$signature\", $class" . "_$method },";
		}
		print $DEF_FH "/* DO NOT EDIT THIS FILE - it is generated */\n";
		print $DEF_FH "/* Header for class $class_path */\n";
		print $DEF_FH "#include <jni.h>\n";
		print $DEF_FH "#ifndef _HEADER_$class" . "_\n";
		print $DEF_FH "#define _HEADER_$class" . "_\n";
		print $DEF_FH "#ifdef _cplusplus\nextern \"C\" {\n#endif\n";
		print $DEF_FH "/* Methods for class $class */\n";
		print $DEF_FH $extern_text;
		if($methods_text ne "") {
			print $DEF_FH "\n\n/*\n * JNI registration\n */\n";
			print $DEF_FH "static JNINativeMethod $methods_name" . "[] = {\n";
			print $DEF_FH "    /* Header for class $class */\n";
			print $DEF_FH $methods_text;
			print $DEF_FH "\n};";
		}
		print $DEF_FH "\n\n";
		print $DEF_FH "int register_$class(JNIEnv* env) {\n";
		print $DEF_FH "    return jniRegisterNativeMethods(env, $class_path,\n";
		print $DEF_FH "            $methods_name, \n";
		print $DEF_FH "            sizeof($methods_name)/$methods_name" . "[0]);\n}\n\n";


		print $DEF_FH "#ifdef _cplusplus\n}\n#endif\n";
		print $DEF_FH "#endif";
		close($DEF_FH);
	}
}
use Cwd 'abs_path';
my $path = abs_path($ARGV[0]);
if($path ne "") {
for(glob($path . "/*.h")) {
  print $_ . "\n";
  make_registration($_);
}
} else {
  print "path is none";
}








